generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
    id         String     @id @default(cuid())
    username   String
    email      String     @unique
    password   String
    todos      ToDo[]
    tasks      Task[]
    habits     Habit[]
    projects   Project[]
    activities Activity[]
}

model ToDo {
    id          String   @id @default(cuid())
    name        String
    description String?
    colorCode   String?
    completed   Boolean  @default(false)
    startDate   DateTime
    endDate     DateTime
    userId      String
    user        User     @relation(fields: [userId], references: [id])
    Project     Project? @relation(fields: [projectId], references: [id])
    projectId   String?
}

model Category {
    id         String     @id @default(cuid())
    name       String
    activities Activity[]
    tasks      Task[]
    habits     Habit[]
}

model Activity {
    id          String   @id @default(cuid())
    description String
    duration    Int
    categoryId  String
    category    Category @relation(fields: [categoryId], references: [id])
    userId      String
    user        User     @relation(fields: [userId], references: [id])
}

model Task {
    id                String   @id @default(cuid())
    name              String
    description       String?
    colorCode         String?
    completed         Boolean  @default(false)
    completedDuration Int
    goalDuration      Int
    startDate         DateTime
    endDate           DateTime
    categoryId        String
    category          Category @relation(fields: [categoryId], references: [id])
    userId            String
    user              User     @relation(fields: [userId], references: [id])
    Project           Project? @relation(fields: [projectId], references: [id])
    projectId         String?
}

model Habit {
    id               String   @id @default(cuid())
    name             String
    description      String?
    colorCode        String?
    completed        Boolean  @default(false)
    completedPercent Float
    period           String
    startDate        DateTime
    endDate          DateTime
    categoryId       String
    category         Category @relation(fields: [categoryId], references: [id])
    userId           String
    user             User     @relation(fields: [userId], references: [id])
    Project          Project? @relation(fields: [projectId], references: [id])
    projectId        String?
}

model Project {
    id          String  @id @default(cuid())
    name        String
    description String?
    tasks       Task[]
    todos       ToDo[]
    userId      String
    user        User    @relation(fields: [userId], references: [id])
    habits      Habit[]
}
