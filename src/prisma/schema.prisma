generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum UserRole {
    ADMIN
    USER
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    password      String?
    image         String?
    accounts      Account[]
    role          UserRole  @default(USER)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    todos      ToDo[]
    tasks      Task[]
    habits     Habit[]
    projects   Project[]
    activities Activity[]
    categories Category[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model VerificationToken {
    id      String   @id @default(cuid())
    email   String
    token   String
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model ToDo {
    id          String   @id @default(cuid())
    name        String
    description String?
    colorCode   String?
    completed   Boolean  @default(false)
    startDate   DateTime
    endDate     DateTime
    userId      String
    user        User     @relation(fields: [userId], references: [id])
    Project     Project? @relation(fields: [projectId], references: [id])
    projectId   String?
}

model Category {
    id         String     @id @default(cuid())
    name       String
    activities Activity[]
    tasks      Task[]
    habits     Habit[]
    userId      String
    user        User     @relation(fields: [userId], references: [id])
}

model Activity {
    id          String   @id @default(cuid())
    description String?
    duration    Int
    categoryId  String
    category    Category @relation(fields: [categoryId], references: [id])
    userId      String
    user        User     @relation(fields: [userId], references: [id])
}

model Task {
    id                String   @id @default(cuid())
    name              String
    description       String?
    colorCode         String?
    completed         Boolean  @default(false)
    completedDuration Int
    goalDuration      Int
    startDate         DateTime
    endDate           DateTime
    categoryId        String
    category          Category @relation(fields: [categoryId], references: [id])
    userId            String
    user              User     @relation(fields: [userId], references: [id])
    Project           Project? @relation(fields: [projectId], references: [id])
    projectId         String?
}

model Habit {
    id               String   @id @default(cuid())
    name             String
    description      String?
    colorCode        String?
    completed        Boolean  @default(false)
    completedPercent Float
    period           String
    startDate        DateTime
    endDate          DateTime
    categoryId       String
    category         Category @relation(fields: [categoryId], references: [id])
    userId           String
    user             User     @relation(fields: [userId], references: [id])
    Project          Project? @relation(fields: [projectId], references: [id])
    projectId        String?
}

model Project {
    id          String  @id @default(cuid())
    name        String
    description String?
    tasks       Task[]
    todos       ToDo[]
    userId      String
    user        User    @relation(fields: [userId], references: [id])
    habits      Habit[]
}
